import{_ as r,r as o,o as k,c as d,d as n,a as s,w as e,e as u,b as p}from"./app-BamYSO-S.js";const i="/PolarDB-for-PostgreSQL/assets/parallel_data_flow-CfEUi17v.png",m={},w=s("h1",{id:"并行-insert",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#并行-insert"},[s("span",null,"并行 INSERT")])],-1),b={class:"table-of-contents"},h=u(`<h2 id="背景介绍" tabindex="-1"><a class="header-anchor" href="#背景介绍"><span>背景介绍</span></a></h2><p>PolarDB-PG 支持 ePQ 弹性跨机并行查询，能够利用集群中多个计算节点提升只读查询的性能。此外，ePQ 也支持在读写节点上通过多进程并行写入，实现对 <code>INSERT</code> 语句的加速。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍"><span>功能介绍</span></a></h2><p>ePQ 的并行 <code>INSERT</code> 功能可以用于加速 <code>INSERT INTO ... SELECT ...</code> 这种读写兼备的 SQL。对于 SQL 中的 <code>SELECT</code> 部分，ePQ 将启动多个进程并行执行查询；对于 SQL 中的 <code>INSERT</code> 部分，ePQ 将在读写节点上启动多个进程并行执行写入。执行写入的进程与执行查询的进程之间通过 <strong>Motion 算子</strong> 进行数据传递。</p><p>能够支持并行 <code>INSERT</code> 的表类型有：</p><ul><li>普通表</li><li>分区表</li><li>（部分）外部表</li></ul><p>并行 <code>INSERT</code> 支持动态调整写入并行度（写入进程数量），在查询不成为瓶颈的条件下性能最高能提升三倍。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><p>创建两张表 <code>t1</code> 和 <code>t2</code>，向 <code>t1</code> 中插入一些数据：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1 <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t2 <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t1 <span class="token keyword">SELECT</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>打开 ePQ 及并行 <code>INSERT</code> 的开关：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> polar_enable_px <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> polar_px_enable_insert_select <span class="token keyword">TO</span> <span class="token keyword">ON</span><span class="token punctuation">;</span>
</code></pre></div><p>通过 <code>INSERT</code> 语句将 <code>t1</code> 表中的所有数据插入到 <code>t2</code> 表中。查看并行 <code>INSERT</code> 的执行计划：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t2 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span>
                                       QUERY <span class="token keyword">PLAN</span>
<span class="token comment">-----------------------------------------------------------------------------------------</span>
 <span class="token keyword">Insert</span> <span class="token keyword">on</span> t2  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.952</span><span class="token number">.87</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">33334</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.0</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">0</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">3</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.432</span><span class="token number">.04</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">100000</span> width<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t1  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.37</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">16667</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre></div><p>其中的 <code>PX Hash 6:3</code> 表示 6 个并行查询 <code>t1</code> 的进程通过 Motion 算子将数据传递给 3 个并行写入 <code>t2</code> 的进程。</p><p>通过参数 <code>polar_px_insert_dop_num</code> 可以动态调整写入并行度，比如：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">SET</span> polar_px_insert_dop_num <span class="token keyword">TO</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t2 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span>
                                        QUERY <span class="token keyword">PLAN</span>
<span class="token comment">------------------------------------------------------------------------------------------</span>
 <span class="token keyword">Insert</span> <span class="token keyword">on</span> t2  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.952</span><span class="token number">.87</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">8334</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
   <span class="token operator">-</span><span class="token operator">&gt;</span>  Result  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.0</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">0</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token operator">-</span><span class="token operator">&gt;</span>  PX <span class="token keyword">Hash</span> <span class="token number">6</span>:<span class="token number">12</span>  <span class="token punctuation">(</span>slice1<span class="token punctuation">;</span> segments: <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.432</span><span class="token number">.04</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">100000</span> width<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>
               <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">Partial</span> Seq Scan <span class="token keyword">on</span> t1  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.431</span><span class="token number">.37</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">16667</span> width<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
 Optimizer: PolarDB PX Optimizer
<span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre></div><p>执行计划中的 <code>PX Hash 6:12</code> 显示，并行查询 <code>t1</code> 的进程数量不变，并行写入 <code>t2</code> 的进程数量变更为 <code>12</code>。</p><h2 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明"><span>使用说明</span></a></h2><p>调整 <code>polar_px_dop_per_node</code> 和 <code>polar_px_insert_dop_num</code> 可以分别修改 <code>INSERT INTO ... SELECT ...</code> 中查询和写入的并行度。</p><ol><li>当查询并行度较低时，逐步提升写入并行度，SQL 执行时间将会逐渐下降并趋于平缓；趋于平缓的原因是查询速度跟不上写入速度而成为瓶颈</li><li>当查询并行度较高时，逐步提升写入并行度，SQL 执行时间将会逐渐下降并趋于平缓；趋于平缓的原因是并行写入只能在读写节点上进行，写入速度因多个写入进程对表页面扩展锁的争抢而跟不上查询速度，成为瓶颈</li></ol><h2 id="原理介绍" tabindex="-1"><a class="header-anchor" href="#原理介绍"><span>原理介绍</span></a></h2><p>ePQ 对并行 <code>INSERT</code> 的处理如下：</p><ol><li>ePQ 优化器以查询解析得到的语法树作为输入，产生计划树</li><li>ePQ 执行器将计划树分发到各计算节点，并创建并行查询/并行写入进程，开始执行各自负责执行的子计划</li><li>并行查询进程从存储中并行读取各自负责的数据分片，并将数据发送到 Motion 算子</li><li>并行写入进程从 Motion 算子中获取数据，向存储并行写入数据</li></ol><p>并行查询和并行写入是以流水线的形式同时进行的。上述执行过程如图所示：</p><p><img src="`+i+'" alt="parallel_insert_data_flow"></p>',26);function _(t,y){const c=o("Badge"),l=o("ArticleInfo"),a=o("router-link");return k(),d("div",null,[w,n(c,{type:"tip",text:"V11 / v1.1.17-",vertical:"top"}),n(l,{frontmatter:t.$frontmatter},null,8,["frontmatter"]),s("nav",b,[s("ul",null,[s("li",null,[n(a,{to:"#背景介绍"},{default:e(()=>[p("背景介绍")]),_:1})]),s("li",null,[n(a,{to:"#功能介绍"},{default:e(()=>[p("功能介绍")]),_:1})]),s("li",null,[n(a,{to:"#使用方法"},{default:e(()=>[p("使用方法")]),_:1})]),s("li",null,[n(a,{to:"#使用说明"},{default:e(()=>[p("使用说明")]),_:1})]),s("li",null,[n(a,{to:"#原理介绍"},{default:e(()=>[p("原理介绍")]),_:1})])])]),h])}const E=r(m,[["render",_],["__file","parallel-dml.html.vue"]]),T=JSON.parse('{"path":"/zh/features/v11/epq/parallel-dml.html","title":"并行 INSERT","lang":"zh-CN","frontmatter":{"author":"渊云","date":"2022/09/27","minute":30},"headers":[{"level":2,"title":"背景介绍","slug":"背景介绍","link":"#背景介绍","children":[]},{"level":2,"title":"功能介绍","slug":"功能介绍","link":"#功能介绍","children":[]},{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":2,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[]},{"level":2,"title":"原理介绍","slug":"原理介绍","link":"#原理介绍","children":[]}],"git":{"updatedTime":1731551625000,"contributors":[{"name":"mrdrivingduck","email":"mrdrivingduck@gmail.com","commits":1}]},"filePathRelative":"zh/features/v11/epq/parallel-dml.md"}');export{E as comp,T as data};
