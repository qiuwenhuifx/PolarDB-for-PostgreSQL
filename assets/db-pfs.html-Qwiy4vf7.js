import{_ as c,r as l,o as i,c as u,d as n,a,w as s,e as k,b as e}from"./app-BamYSO-S.js";const d={},m=a("h1",{id:"基于-pfs-文件系统部署",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基于-pfs-文件系统部署"},[a("span",null,"基于 PFS 文件系统部署")])],-1),v=a("p",null,"本文将指导您在分布式文件系统 PolarDB File System（PFS）上编译部署 PolarDB-PG，适用于已经在共享存储上格式化并挂载 PFS 文件系统的计算节点。",-1),h={class:"table-of-contents"},g=k(`<h2 id="primary-节点部署" tabindex="-1"><a class="header-anchor" href="#primary-节点部署"><span>Primary 节点部署</span></a></h2><p>初始化 Primary 节点的本地数据目录 <code>~/primary/</code>：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>initdb <span class="token parameter variable">-D</span> <span class="token environment constant">$HOME</span>/primary
</code></pre></div><p>在共享存储的 <code>/nvme1n1/shared_data/</code> 路径上创建共享数据目录，然后使用 <code>polar-initdb.sh</code> 脚本初始化共享数据目录：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 使用 pfs 创建共享数据目录</span>
<span class="token function">sudo</span> pfs <span class="token parameter variable">-C</span> disk <span class="token function">mkdir</span> /nvme1n1/shared_data
<span class="token comment"># 初始化 db 的本地和共享数据目录</span>
<span class="token function">sudo</span> polar-initdb.sh <span class="token environment constant">$HOME</span>/primary/ /nvme1n1/shared_data/ primary
</code></pre></div><p>编辑 Primary 节点的配置。打开 <code>~/primary/postgresql.conf</code>，增加配置项：</p><div class="language-ini" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">5432</span>
<span class="token key attr-name">polar_hostid</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">polar_enable_shared_storage_mode</span><span class="token punctuation">=</span><span class="token value attr-value">on</span>
<span class="token key attr-name">polar_disk_name</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">nvme1n1</span>&#39;</span>
<span class="token key attr-name">polar_datadir</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">/nvme1n1/shared_data/</span>&#39;</span>
<span class="token key attr-name">polar_vfs.localfs_mode</span><span class="token punctuation">=</span><span class="token value attr-value">off</span>
<span class="token key attr-name">shared_preload_libraries</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">$libdir/polar_vfs,$libdir/polar_worker</span>&#39;</span>
<span class="token key attr-name">polar_storage_cluster_name</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">disk</span>&#39;</span>
<span class="token key attr-name">logging_collector</span><span class="token punctuation">=</span><span class="token value attr-value">on</span>
<span class="token key attr-name">log_line_prefix</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">%p\\t%r\\t%u\\t%m\\t</span>&#39;</span>
<span class="token key attr-name">log_directory</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">pg_log</span>&#39;</span>
<span class="token key attr-name">listen_addresses</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">*</span>&#39;</span>
<span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>
</code></pre></div><p>编辑 Primary 节点的客户端认证文件 <code>~/primary/pg_hba.conf</code>，增加以下配置项，允许 Replica 节点进行物理复制：</p><div class="language-ini" data-ext="ini" data-title="ini"><pre class="language-ini"><code>host	replication	postgres	0.0.0.0/0	trust
</code></pre></div><p>最后，启动 Primary 节点：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pg_ctl start <span class="token parameter variable">-D</span> <span class="token environment constant">$HOME</span>/primary
</code></pre></div><p>检查 Primary 节点能否正常运行：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-d</span> postgres <span class="token parameter variable">-c</span> <span class="token string">&#39;SELECT version();&#39;</span>
                                   version
----------------------------------------------------------------------
 PostgreSQL <span class="token number">15</span>.x <span class="token punctuation">(</span>PolarDB <span class="token number">15</span>.x.x.x build xxxxxxxx<span class="token punctuation">)</span> on <span class="token punctuation">{</span>your_platform<span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token number">1</span> row<span class="token punctuation">)</span>
</code></pre></div><p>在 Primary 节点上，为对应的 Replica 节点创建相应的复制槽，用于 Replica 节点的物理复制：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-d</span> postgres <span class="token punctuation">\\</span>
    <span class="token parameter variable">-c</span> <span class="token string">&quot;SELECT pg_create_physical_replication_slot(&#39;replica1&#39;);&quot;</span>
 pg_create_physical_replication_slot
-------------------------------------
 <span class="token punctuation">(</span>replica1,<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span> row<span class="token punctuation">)</span>
</code></pre></div><h2 id="replica-节点部署" tabindex="-1"><a class="header-anchor" href="#replica-节点部署"><span>Replica 节点部署</span></a></h2><p>在 Replica 节点本地磁盘的 <code>~/replica1</code> 路径下创建一个空目录，然后通过 <code>polar-initdb.sh</code> 脚本使用共享存储上的数据目录来初始化 Replica 节点的本地目录。初始化后的本地目录中没有默认配置文件，所以还需要使用 <code>initdb</code> 创建一个临时的本地目录模板，然后将所有的默认配置文件拷贝到 Replica 节点的本地目录下：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-m</span> 0700 <span class="token environment constant">$HOME</span>/replica1
<span class="token function">sudo</span> polar-initdb.sh <span class="token environment constant">$HOME</span>/replica1/ /nvme1n1/shared_data/ replica

initdb <span class="token parameter variable">-D</span> /tmp/replica1
<span class="token function">cp</span> /tmp/replica1/*.conf <span class="token environment constant">$HOME</span>/replica1/
</code></pre></div><p>编辑 Replica 的配置。打开 <code>~/replica1/postgresql.conf</code>，增加配置项：</p><div class="language-ini" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">5433</span>
<span class="token key attr-name">polar_hostid</span><span class="token punctuation">=</span><span class="token value attr-value">2</span>
<span class="token key attr-name">polar_enable_shared_storage_mode</span><span class="token punctuation">=</span><span class="token value attr-value">on</span>
<span class="token key attr-name">polar_disk_name</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">nvme1n1</span>&#39;</span>
<span class="token key attr-name">polar_datadir</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">/nvme1n1/shared_data/</span>&#39;</span>
<span class="token key attr-name">polar_vfs.localfs_mode</span><span class="token punctuation">=</span><span class="token value attr-value">off</span>
<span class="token key attr-name">shared_preload_libraries</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">$libdir/polar_vfs,$libdir/polar_worker</span>&#39;</span>
<span class="token key attr-name">polar_storage_cluster_name</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">disk</span>&#39;</span>
<span class="token key attr-name">logging_collector</span><span class="token punctuation">=</span><span class="token value attr-value">on</span>
<span class="token key attr-name">log_line_prefix</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">%p\\t%r\\t%u\\t%m\\t</span>&#39;</span>
<span class="token key attr-name">log_directory</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">pg_log</span>&#39;</span>
<span class="token key attr-name">listen_addresses</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">*</span>&#39;</span>
<span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>

<span class="token comment"># replication</span>
<span class="token key attr-name">primary_slot_name</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">replica1</span>&#39;</span>
<span class="token key attr-name">primary_conninfo</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;<span class="token inner-value">host=[Primary 节点所在IP] port=5432 user=postgres dbname=postgres application_name=replica1</span>&#39;</span>
</code></pre></div><p>标识节点以 Replica 模式启动：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">touch</span> <span class="token environment constant">$HOME</span>/replica1/replica.signal
</code></pre></div><p>最后，启动 Replica 节点：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pg_ctl start <span class="token parameter variable">-D</span> <span class="token environment constant">$HOME</span>/replica1
</code></pre></div><p>检查 Replica 节点能否正常运行：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-p</span> <span class="token number">5433</span> <span class="token parameter variable">-d</span> postgres <span class="token parameter variable">-c</span> <span class="token string">&#39;SELECT version();&#39;</span>
                                   version
----------------------------------------------------------------------
 PostgreSQL <span class="token number">15</span>.x <span class="token punctuation">(</span>PolarDB <span class="token number">15</span>.x.x.x build xxxxxxxx<span class="token punctuation">)</span> on <span class="token punctuation">{</span>your_platform<span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token number">1</span> row<span class="token punctuation">)</span>
</code></pre></div><h2 id="集群检查和测试" tabindex="-1"><a class="header-anchor" href="#集群检查和测试"><span>集群检查和测试</span></a></h2><p>部署完成后，需要进行实例检查和测试，确保 Primary 节点可正常写入数据，Replica 节点可以正常读取。</p><p>登录 Primary 节点，创建测试表并插入样例数据：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-q</span> <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-d</span> postgres <span class="token punctuation">\\</span>
    <span class="token parameter variable">-c</span> <span class="token string">&quot;CREATE TABLE t (t1 INT PRIMARY KEY, t2 INT); INSERT INTO t VALUES (1, 1),(2, 3),(3, 3);&quot;</span>
</code></pre></div><p>登录 Replica 节点，查询刚刚插入的样例数据：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>psql <span class="token parameter variable">-q</span> <span class="token parameter variable">-p</span> <span class="token number">5433</span> <span class="token parameter variable">-d</span> postgres <span class="token parameter variable">-c</span> <span class="token string">&quot;SELECT * FROM t;&quot;</span>
 t1 <span class="token operator">|</span> t2
----+----
  <span class="token number">1</span> <span class="token operator">|</span>  <span class="token number">1</span>
  <span class="token number">2</span> <span class="token operator">|</span>  <span class="token number">3</span>
  <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">3</span>
<span class="token punctuation">(</span><span class="token number">3</span> rows<span class="token punctuation">)</span>
</code></pre></div><p>在 Primary 节点上插入的数据对 Replica 节点可见，这意味着基于共享存储的 PolarDB-PG 计算节点集群搭建成功。</p><hr><h2 id="常见运维步骤" tabindex="-1"><a class="header-anchor" href="#常见运维步骤"><span>常见运维步骤</span></a></h2>`,35);function _(o,b){const r=l("ArticleInfo"),t=l("router-link"),p=l("RouteLink");return i(),u("div",null,[m,n(r,{frontmatter:o.$frontmatter},null,8,["frontmatter"]),v,a("nav",h,[a("ul",null,[a("li",null,[n(t,{to:"#primary-节点部署"},{default:s(()=>[e("Primary 节点部署")]),_:1})]),a("li",null,[n(t,{to:"#replica-节点部署"},{default:s(()=>[e("Replica 节点部署")]),_:1})]),a("li",null,[n(t,{to:"#集群检查和测试"},{default:s(()=>[e("集群检查和测试")]),_:1})]),a("li",null,[n(t,{to:"#常见运维步骤"},{default:s(()=>[e("常见运维步骤")]),_:1})])])]),g,a("ul",null,[a("li",null,[n(p,{to:"/operation/backup-and-restore.html"},{default:s(()=>[e("备份恢复")]),_:1})]),a("li",null,[n(p,{to:"/operation/grow-storage.html"},{default:s(()=>[e("共享存储在线扩容")]),_:1})]),a("li",null,[n(p,{to:"/operation/scale-out.html"},{default:s(()=>[e("计算节点扩缩容")]),_:1})]),a("li",null,[n(p,{to:"/operation/ro-online-promote.html"},{default:s(()=>[e("Replica 节点在线 Promote")]),_:1})])])])}const f=c(d,[["render",_],["__file","db-pfs.html.vue"]]),x=JSON.parse('{"path":"/deploying/db-pfs.html","title":"基于 PFS 文件系统部署","lang":"en-US","frontmatter":{"author":"棠羽","date":"2024/08/30","minute":15},"headers":[{"level":2,"title":"Primary 节点部署","slug":"primary-节点部署","link":"#primary-节点部署","children":[]},{"level":2,"title":"Replica 节点部署","slug":"replica-节点部署","link":"#replica-节点部署","children":[]},{"level":2,"title":"集群检查和测试","slug":"集群检查和测试","link":"#集群检查和测试","children":[]},{"level":2,"title":"常见运维步骤","slug":"常见运维步骤","link":"#常见运维步骤","children":[]}],"git":{"updatedTime":1731551625000,"contributors":[{"name":"mrdrivingduck","email":"mrdrivingduck@gmail.com","commits":1}]},"filePathRelative":"deploying/db-pfs.md"}');export{f as comp,x as data};
